/*
    Copyright (C) 2018 Jeffrey Sharp

    Permission to use, copy, modify, and distribute this software for any
    purpose with or without fee is hereby granted, provided that the above
    copyright notice and this permission notice appear in all copies.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

using System;
using System.IO;
using System.Threading.Tasks;

namespace Sharp.BlobStorage
{
    /// <summary>
    ///   Simple interface to blob storage.
    /// </summary>
    public interface IBlobStorage
    {
        /// <summary>
        ///   Stores the content of a stream as a new blob with an autogenerated name.
        /// </summary>
        /// <param name="stream">The content to store.</param>
        /// <param name="extension">An extension to append to the autogenerated blob name.</param>
        /// <returns>A URI that identifies the created blob.</returns>
        Uri Put(Stream stream, string extension = null);

        /// <summary>
        ///   Asynchronously stores the content of a stream as a new blob with an autogenerated name.
        /// </summary>
        /// <param name="stream">The content to store.</param>
        /// <param name="extension">An extension to append to the autogenerated blob name.</param>
        /// <returns>
        ///   A task that represents the asynchronous storage operation.
        ///   The task's <c>Result</c> is a URI that identifies the created blob.
        /// </returns>
        Task<Uri> PutAsync(Stream stream, string extension = null);

        /// <summary>
        ///   Retrieves the content of a blob.
        /// </summary>
        /// <param name="uri">A URI that identifies the blob.</param>
        /// <returns>A stream of the blob's content.</returns>
        Stream Get(Uri uri);

        /// <summary>
        ///   Asynchronously retrieves the content of a blob.
        /// </summary>
        /// <param name="uri">A URI that identifies the blob.</param>
        /// <returns>
        ///   A task that represents the asynchronous retrieval operation.
        ///   The task's <c>Result</c> is a stream of the blob's content.
        /// </returns>
        Task<Stream> GetAsync(Uri uri);

        /// <summary>
        ///   Deletes a blob if it exists.
        /// </summary>
        /// <param name="uri">A URI that identifies the blob.</param>
        /// <returns>
        ///   <c>true</c> if the blob existed; <c>false</c> otherwise.
        /// </returns>
        bool Delete(Uri uri);

        /// <summary>
        ///   Deletes a blob asynchronously if it exists.
        /// </summary>
        /// <param name="uri">A URI that identifies the blob.</param>
        /// <returns>
        ///   A task that represents the asynchronous deletion operation.
        ///   The task's <c>Result</c> is <c>true</c> if the blob existed;
        ///   <c>false</c> otherwise.
        /// </returns>
        Task<bool> DeleteAsync(Uri uri);
    }
}
